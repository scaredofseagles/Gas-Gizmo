{"version":3,"sources":["utils/API.js","utils/store.js","utils/useAuth.js","components/ErrorMessage.js","views/Signup.js","utils/PrivateRoute.js","utils/crypto.js","views/AddAccount.js","views/Generate.js","components/HeaderBar.js","components/DeleteAcct.js","components/ModifyAcct.js","components/UpdateAccount.js","components/AccountCard.js","views/Dashboard.js","views/Login.js","views/ForgotPassword.js","views/Landing.js","App.js","index.js"],"names":["API","authorize","data","axios","post","getUser","email","get","addUser","sendAcct","getAccts","id","editAcct","put","removeAcct","delete","getSession","getCurrentSession","addSession","editSession","patch","removeSession","useStore","create","set","currentUser","setCurrentUser","useAuth","signUp","a","firstName","lastName","password","result","success","response","userid","login","logOut","resetPassword","confirmPassword","ErrorMessage","children","color","fontSize","Signup","useState","phoneNum","funName","confirmPass","formValues","setFormValues","formErrors","setFormErrors","error","setError","show","setShow","showConfirm","setShowConfirm","history","useHistory","handleChange","e","target","name","value","validateFields","values","errors","test","length","handleFormSubmit","event","preventDefault","Object","keys","push","message","className","style","minHeight","borderWidth","borderColor","bg","borderRadius","w","minheight","mt","mb","p","spacing","htmlFor","mr","placeholder","onChange","errorBorderColor","isInvalid","type","icon","onClick","variant","status","_hover","float","as","Link","to","PrivateRoute","Component","component","rest","state","render","props","CryptoJS","require","encrypt","AES","process","toString","AddAccount","open","onClose","updateData","website","username","close","setClosing","hashedPass","newAcct","user","setTimeout","isOpen","isDisabled","Generate","range","setRange","setPassword","uppercase","setUppercase","lowercase","setLowercase","numbers","setNumbers","symbols","setSymbols","displayPassword","finalPass","console","log","handleShow","ml","checked","colorScheme","aria-label","defaultIsChecked","newValue","max","isLength","finalCharSet","i","Math","floor","random","generatePass","handleClose","item","Example","passwordRef","useRef","copyStatus","setCopyStatus","ref","isReadOnly","current","select","document","execCommand","focus","err","margin","HeaderBar","update","openAcct","setOpenAcct","openGenerate","setOpenGenerate","pt","pb","display","listStyleType","size","marginLeft","marginRight","isRound","backgroundColor","padding","first_name","h","DeleteAcct","setMessage","url","disabled","ModifyAcct","setOpen","setValue","websiteRef","usernameRef","newData","ConfirmModal","allow","my","defaultValue","readOnly","OptionBar","styled","div","UpdateAccount","anchorEl","setAnchorEl","openEdit","setOpenEdit","openDelete","setOpenDelete","IconButton","currentTarget","Menu","keepMounted","Boolean","MenuItem","AccountCard","alert","setAlert","copyToClipboard","minWidth","src","image","alt","width","height","InputGroup","FormControl","Append","decrypt","enc","Utf8","transition","dismissible","position","right","top","confirmPasswordRef","isRequired","Dashboard","accounts","setAccounts","setUpdateData","useEffect","getAccounts","Container","map","Login","ForgotPassword","emailRef","loading","setLoading","Card","Body","Alert","Form","onSubmit","Group","Label","Control","required","Button","Landing","ReachLink","justifyContent","paddingTop","objectFit","boxSize","pl","App","useLayoutEffect","checkSession","path","exact","pathname","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3192c4e9.chunk.js","sourcesContent":["import axios from \"axios\";\n\nlet API = {\n  authorize: data => {\n    return axios.post(\"/api/users/authorize\", data);\n  },\n  getUser: email => {\n    return axios.get(\"/api/users/\" + email);\n  },\n  addUser: data => {\n    return axios.post(\"/api/users\", data);\n  },\n\n  sendAcct: data => {\n    return axios.post(\"/api/accounts\", data);\n  },\n  getAccts: id => {\n    return axios.get(\"api/accounts/\" + id);\n  },\n  editAcct: (id, data) => {\n    return axios.put(\"/api/accounts/\" + id, data);\n  },\n  removeAcct: id => {\n    return axios.delete(\"api/accounts/\" + id);\n  },\n\n  getSession: id => {\n    return axios.get(\"/api/sessions/\" + id);\n  },\n  getCurrentSession: () => {\n    return axios.get(\"/api/sessions\");\n  },\n  addSession: data => {\n    return axios.post(\"/api/sessions\", data);\n  },\n  editSession: id => {\n    return axios.patch(\"/api/sessions/\" + id);\n  },\n  removeSession: id => {\n    return axios.delete(\"/api/sessions/\" + id);\n  }\n};\n\nexport default API;\n","import create from \"zustand\";\n\nconst useStore = create(set => ({\n  currentUser: null,\n  setCurrentUser: currentUser => set({ currentUser })\n}));\n\nexport default useStore;\n","import API from \"./API\";\nimport useStore from \"./store\";\n\nconst useAuth = () => {\n  const { setCurrentUser } = useStore();\n  // const currentUser = useStore(state => state.currentUser);\n\n  const signUp = async ({ firstName, lastName, email, password }) => {\n    const result = await API.addUser({\n      firstName,\n      lastName,\n      email,\n      password\n    });\n\n    if (result.data.success) {\n      setCurrentUser(result.data.response);\n      await API.addSession({ userid: result.data.response.id });\n    }\n\n    return result;\n  };\n\n  const login = async ({ email, password }) => {\n    const result = await API.authorize({ email, password });\n\n    if (result.data.success) {\n      setCurrentUser(result.data.response);\n      await API.addSession({ userid: result.data.response.id });\n    }\n\n    return result;\n  };\n\n  const logOut = async id => {\n    await API.removeSession(id);\n    setCurrentUser({});\n  };\n\n  const resetPassword = email => {\n    //\n  };\n\n  const confirmPassword = async (email, password) => {\n    return await API.authorize({ email, password });\n  };\n\n  return { signUp, login, logOut, resetPassword, confirmPassword };\n};\n\nexport default useAuth;\n","import { Text } from \"@chakra-ui/react\";\n\nconst ErrorMessage = ({ children }) => {\n  return (\n    <Text color=\"red.500\" fontSize=\"sm\">\n      {children}\n    </Text>\n  );\n};\n\nexport default ErrorMessage;\n","import { useState } from \"react\";\nimport useAuth from \"../utils/useAuth\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  Box,\n  Input,\n  Heading,\n  Center,\n  Stack,\n  Text,\n  InputGroup,\n  InputRightElement,\n  IconButton,\n  Alert,\n  AlertIcon,\n  Link as ReachLink,\n  Button\n} from \"@chakra-ui/react\";\nimport { AiFillEyeInvisible, AiFillEye } from \"react-icons/ai\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nexport default function Signup() {\n  const initialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    phoneNum: \"\",\n    funName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPass: \"\"\n  };\n\n  const [formValues, setFormValues] = useState(initialValues);\n  const [formErrors, setFormErrors] = useState({});\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [show, setShow] = useState(false);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const history = useHistory();\n\n  const { signUp } = useAuth();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setFormValues({\n      ...formValues,\n      [name]: value\n    });\n  };\n\n  const validateFields = values => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/i;\n    let errors = {};\n\n    if (!values.firstName) errors.firstName = \"Must enter a first name\";\n    if (!values.lastName) errors.lastName = \"Must enter a last name\";\n\n    if (!values.email) errors.email = \"Must enter an email\";\n    else if (!emailRegex.test(values.email))\n      errors.email = \"Email is not valid\";\n\n    if (!values.password) errors.password = \"Must enter a password\";\n    else if (values.password.length < 8)\n      errors.password = \"Password must be at least 8 characters\";\n    else if (values.password.length > 15)\n      errors.password = \"Password must not exceed 15 characters\";\n\n    if (!values.confirmPass) errors.confirmPass = \"Must confirm password\";\n    else if (values.password !== values.confirmPass)\n      errors.confirmPass = \"Passwords do not match\";\n\n    return errors;\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    setFormErrors(validateFields(formValues));\n\n    if (!Object.keys(formErrors).length) {\n      let result = await signUp(formValues);\n\n      if (result.data.success) {\n        history.push(\"/\");\n      } else setError(result.data.message);\n    } else setError(\"Failed to Create User.\");\n  };\n\n  return (\n    <div\n      className=\"d-flex align-items-center justify-content-center css-selector\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Center>\n        <Stack>\n          <Box\n            borderWidth=\"2px\"\n            borderColor=\"gray.500\"\n            bg=\"white\"\n            borderRadius=\"7px\"\n            w=\"500px\"\n            minheight=\"360px\"\n            mt=\"3em\"\n            mb=\".5em\"\n            p=\"1.5em\"\n          >\n            <Center>\n              <Heading>Sign Up</Heading>\n            </Center>\n\n            <Stack spacing={3} mt=\"1em\">\n              <InputGroup>\n                <Text htmlFor=\"firstName\" mr=\"1em\">\n                  First Name\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  value={formValues.firstName}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.firstName}\n                />\n              </InputGroup>\n\n              {formErrors.firstName ? (\n                <ErrorMessage children={formErrors.firstName} />\n              ) : null}\n\n              <InputGroup>\n                <Text htmlFor=\"lastName\" mr=\"1em\">\n                  Last Name\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  value={formValues.lastName}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.lastName}\n                />\n              </InputGroup>\n\n              {formErrors.lastName ? (\n                <ErrorMessage children={formErrors.lastName} />\n              ) : null}\n\n              <InputGroup>\n                <Text htmlFor=\"email\" mr=\"2em\">\n                  Email\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formValues.email}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.email}\n                />\n              </InputGroup>\n\n              {formErrors.email ? (\n                <ErrorMessage children={formErrors.email} />\n              ) : null}\n\n              <InputGroup>\n                <Text htmlFor=\"password\" mr=\"1em\">\n                  Password\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  type={show ? \"text\" : \"password\"}\n                  id=\"password\"\n                  name=\"password\"\n                  value={formValues.password}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.password}\n                />\n                <InputRightElement\n                  children={\n                    <IconButton\n                      icon={show ? <AiFillEyeInvisible /> : <AiFillEye />}\n                      onClick={() => setShow(!show)}\n                      variant=\"ghost\"\n                    />\n                  }\n                />\n              </InputGroup>\n\n              {formErrors.password ? (\n                <ErrorMessage children={formErrors.password} />\n              ) : null}\n\n              <InputGroup>\n                <Text htmlFor=\"confirmPass\" mr=\"1em\">\n                  Confirm Password\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  type={showConfirm ? \"text\" : \"password\"}\n                  id=\"confirmPass\"\n                  name=\"confirmPass\"\n                  value={formValues.confirmPass}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.confirmPass}\n                />\n                <InputRightElement\n                  children={\n                    <IconButton\n                      icon={\n                        showConfirm ? <AiFillEyeInvisible /> : <AiFillEye />\n                      }\n                      onClick={() => setShowConfirm(!showConfirm)}\n                      variant=\"ghost\"\n                    />\n                  }\n                />\n              </InputGroup>\n\n              {formErrors.confirmPass ? (\n                <ErrorMessage children={formErrors.confirmPass} />\n              ) : null}\n\n              {error && (\n                <Alert status=\"error\">\n                  <AlertIcon />\n                  {error}\n                </Alert>\n              )}\n            </Stack>\n\n            <Button\n              onClick={handleFormSubmit}\n              mt=\"1em\"\n              bg=\"yellow.400\"\n              color=\"white\"\n              _hover={{ bg: \"yellow.500\" }}\n              style={{ float: \"right\" }}\n            >\n              Submit\n            </Button>\n          </Box>\n          <Center>\n            <Text color=\"gray.600\">\n              Already have an account?{\" \"}\n              <ReachLink as={Link} to=\"/login\" color=\"yellow.400\">\n                Login\n              </ReachLink>\n            </Text>\n          </Center>\n        </Stack>\n      </Center>\n    </div>\n  );\n}\n","import { Route, Redirect } from \"react-router-dom\";\nimport useStore from \"./store\";\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const currentUser = useStore(state => state.currentUser);\n\n  return (\n    <Route\n      {...rest}\n      render={props => {\n        return currentUser ? (\n          <Component {...props} />\n        ) : (\n          <Redirect to=\"/login\" />\n        );\n      }}\n    ></Route>\n  );\n};\n\nexport default PrivateRoute;\n","const CryptoJS = require(\"crypto-js\");\n\nconst encrypt = password =>{\n    let cipherText = CryptoJS.AES.encrypt(password, process.env.REACT_APP_SECRETKEY).toString();\n\n    return cipherText\n};\n\nconst decrypt = password =>{\n    let decryptedText = CryptoJS.AES.decrypt(password, process.env.REACT_APP_SECRETKEY)\n    let originalText = decryptedText.toString(CryptoJS.enc.Utf8);\n    return originalText\n}\n\nexport { encrypt, decrypt };","import { useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  InputGroup,\n  InputRightElement,\n  IconButton,\n  Text,\n  Input,\n  Button,\n  Alert,\n  AlertIcon,\n  Stack\n} from \"@chakra-ui/react\";\nimport { AiFillEyeInvisible, AiFillEye } from \"react-icons/ai\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport { encrypt } from \"../utils/crypto\";\nimport API from \"../utils/API\";\nimport useStore from \"../utils/store\";\n\nexport default function AddAccount({ open, onClose, updateData }) {\n  const initialValues = {\n    website: \"\",\n    username: \"\",\n    password: \"\"\n  };\n\n  const [formValues, setFormValues] = useState(initialValues);\n  const [formErrors, setFormErrors] = useState({});\n  const [show, setShow] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [close, setClosing] = useState(false);\n  const { currentUser } = useStore();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setFormValues({\n      ...formValues,\n      [name]: value\n    });\n  };\n\n  let validateFields = values => {\n    let errors = {};\n\n    // TODO: do i need to check URL format???\n\n    if (!formValues.website) errors.website = \"Must enter a URL\";\n    if (!formValues.username)\n      errors.username = \"Must enter a username or email\";\n    if (!formValues.password) errors.password = \"Must enter a password\";\n\n    return errors;\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    setFormErrors(validateFields(formValues));\n\n    if (!Object.keys(formErrors).length) {\n      let hashedPass = await encrypt(formValues.password);\n\n      if (hashedPass) {\n        let newAcct = {\n          website: formValues.website,\n          username: formValues.username,\n          password: hashedPass,\n          user: currentUser.id\n        };\n\n        let result = await API.sendAcct(newAcct);\n        if (result.data.success) {\n          // TODO: disable, spinner, update\n          updateData();\n          setClosing(true);\n          setTimeout(() => {\n            setClosing(false);\n            onClose();\n            setError(\"\");\n          }, 1500);\n        } else setError(result.data.message);\n      } else setError(\"Something went wrong. Please Try Again\");\n    }\n  };\n\n  return (\n    <Modal isOpen={open} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Add Account</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Stack spacing={3} mt=\"1em\">\n            <InputGroup>\n              <Text htmlFor=\"website\" mr=\"3em\">\n                Website\n              </Text>\n              <Input\n                placeholder=\"Paste the URL here\"\n                id=\"website\"\n                name=\"website\"\n                value={formValues.website}\n                onChange={handleChange}\n                errorBorderColor=\"crimson\"\n                isInvalid={formErrors.website}\n              />\n            </InputGroup>\n\n            {formErrors.website ? (\n              <ErrorMessage children={formErrors.website} />\n            ) : null}\n\n            <InputGroup>\n              <Text htmlFor=\"username\" mr=\"0.7em\">\n                Username or Email\n              </Text>\n              <Input\n                placeholder=\"Enter here\"\n                id=\"username\"\n                name=\"username\"\n                value={formValues.username}\n                onChange={handleChange}\n                errorBorderColor=\"crimson\"\n                isInvalid={formErrors.username}\n              />\n            </InputGroup>\n\n            {formErrors.username ? (\n              <ErrorMessage children={formErrors.username} />\n            ) : null}\n\n            <InputGroup>\n              <Text htmlFor=\"password\" mr=\"2.2em\">\n                Password\n              </Text>\n              <Input\n                placeholder=\"Enter here\"\n                type={show ? \"text\" : \"password\"}\n                id=\"password\"\n                name=\"password\"\n                value={formValues.password}\n                onChange={handleChange}\n                errorBorderColor=\"crimson\"\n                isInvalid={formErrors.password}\n              />\n              <InputRightElement\n                children={\n                  <IconButton\n                    icon={show ? <AiFillEyeInvisible /> : <AiFillEye />}\n                    onClick={() => setShow(!show)}\n                    variant=\"ghost\"\n                  />\n                }\n              />\n            </InputGroup>\n\n            {formErrors.password ? (\n              <ErrorMessage children={formErrors.password} />\n            ) : null}\n\n            {error && (\n              <Alert status=\"error\">\n                <AlertIcon />\n                {error}\n              </Alert>\n            )}\n          </Stack>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            onClick={handleFormSubmit}\n            bg=\"yellow.400\"\n            color=\"white\"\n            _hover={{ bg: \"yellow.500\" }}\n            isDisabled={close}\n          >\n            Add\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { useState, useRef } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  InputGroup,\n  InputLeftElement,\n  IconButton,\n  Text,\n  Input,\n  Button,\n  Alert,\n  AlertIcon,\n  Stack,\n  Checkbox,\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb\n} from \"@chakra-ui/react\";\nimport { FaClipboard } from \"react-icons/fa\";\n\nexport default function Generate({ open, onClose }) {\n  const [show, setShow] = useState(false);\n  const [range, setRange] = useState(10);\n  const [password, setPassword] = useState(\"\");\n\n  const [uppercase, setUppercase] = useState(false);\n  const [lowercase, setLowercase] = useState(true);\n  const [numbers, setNumbers] = useState(false);\n  const [symbols, setSymbols] = useState(false);\n\n  const [error, setError] = useState(\"\");\n\n  const generatePass = () => {\n    const isLength = range;\n    let finalCharSet = \"\";\n\n    if (uppercase) finalCharSet += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (lowercase) finalCharSet += \"abcdefghijklmnopqrstuvwxyz\";\n    if (symbols) finalCharSet += \"1234567890\";\n    if (numbers) finalCharSet += \"!@#$%?&*\";\n\n    let finalPass = \"\";\n\n    for (let i = 0; i < isLength; i++) {\n      let randomInt = Math.floor(Math.random() * finalCharSet.length);\n      finalPass += finalCharSet[randomInt];\n    }\n\n    setPassword(finalPass);\n    displayPassword(finalPass);\n  };\n\n  const displayPassword = finalPass => {\n    console.log({ password });\n    if (finalPass.length > 1) {\n      handleShow();\n    } else {\n      setError(\"Something went wrong\");\n    }\n  };\n\n  // modal handling functions\n  const handleClose = item => {\n    if (item) {\n      setShow(false);\n      onClose();\n    }\n\n    setShow(false);\n  };\n  const handleShow = () => setShow(true);\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n\n    generatePass();\n  };\n\n  const handleChange = newValue => {\n    console.log(newValue);\n    setRange(newValue);\n  };\n  return (\n    <>\n      <Modal isOpen={open} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Generate A Password</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text fontSize=\"xl\">Select all that apply</Text>\n            <Stack mt=\"1em\" ml=\"1.5em\" mb=\"1.5em\">\n              <Checkbox\n                value={uppercase}\n                onChange={e => setUppercase(e.target.checked)}\n                colorScheme=\"yellow\"\n                aria-label=\"Uppercase Letters\"\n                name=\"uppercase\"\n              >\n                Uppercase Letters\n              </Checkbox>\n              <Checkbox\n                value={lowercase}\n                onChange={e => setLowercase(e.target.checked)}\n                colorScheme=\"yellow\"\n                aria-label=\"Lowercase Letters\"\n                name=\"lowercase\"\n                defaultIsChecked\n              >\n                Lowercase Letters\n              </Checkbox>\n              <Checkbox\n                value={numbers}\n                onChange={e => setNumbers(e.target.checked)}\n                colorScheme=\"yellow\"\n                aria-label=\"Numbers\"\n                name=\"numbers\"\n              >\n                Numbers\n              </Checkbox>\n              <Checkbox\n                value={symbols}\n                onChange={e => setSymbols(e.target.checked)}\n                colorScheme=\"yellow\"\n                aria-label=\"Symbols\"\n                name=\"symbols\"\n              >\n                Symbols\n              </Checkbox>\n            </Stack>\n            <Text fontSize=\"xl\" mb=\"1em\">\n              Password Length\n            </Text>\n            <Slider\n              aria-label=\"password-length-slider\"\n              value={range}\n              onChange={handleChange}\n              max={40}\n            >\n              <SliderTrack bg=\"gray.200\">\n                <SliderFilledTrack bg=\"yellow.400\" />\n              </SliderTrack>\n\n              <SliderThumb bg=\"yellow.500\" />\n            </Slider>\n\n            <Text color=\"gray.600\">Length: {range}</Text>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              onClick={handleFormSubmit}\n              bg=\"yellow.400\"\n              color=\"white\"\n              _hover={{ bg: \"yellow.500\" }}\n            >\n              Generate\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n      <Example\n        handleShow={handleShow}\n        handleClose={handleClose}\n        show={show}\n        password={password}\n      />\n    </>\n  );\n}\n\nconst Example = props => {\n  const passwordRef = useRef(null);\n  const [copyStatus, setCopyStatus] = useState(\"\");\n\n  const copyToClipboard = event => {\n    try {\n      passwordRef.current.select();\n      document.execCommand(\"copy\");\n      event.target.focus();\n      setCopyStatus(\"Copied!\");\n    } catch (err) {\n      setCopyStatus(\"Something went wrong\");\n    }\n  };\n\n  return (\n    <>\n      <Modal\n        isOpen={props.show}\n        onClose={() => {\n          props.handleClose();\n          setCopyStatus(\"\");\n        }}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Generated Password</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text>Your password is: </Text>\n            <InputGroup className=\"mb-3\">\n              <Input\n                value={props.password}\n                ref={passwordRef}\n                className=\"text-center\"\n                variant=\"filled\"\n                isReadOnly\n              />\n              <InputLeftElement>\n                <IconButton\n                  onClick={copyToClipboard}\n                  variant=\"solid\"\n                  icon={<FaClipboard />}\n                />\n              </InputLeftElement>\n            </InputGroup>\n          </ModalBody>\n          {copyStatus && (\n            <Alert\n              status={copyStatus === \"Copied!\" ? \"success\" : \"error\"}\n              w=\"90%\"\n              style={{ margin: \"0 1.5em\" }}\n            >\n              <AlertIcon />\n              {copyStatus}\n            </Alert>\n          )}\n          <ModalFooter>\n            <Button\n              mr=\"1em\"\n              bg=\"yellow.400\"\n              color=\"white\"\n              _hover={{ bg: \"yellow.500\" }}\n              onClick={() => {\n                props.handleClose();\n                setCopyStatus(\"\");\n              }}\n            >\n              Generate Again\n            </Button>\n            <Button\n              onClick={() => {\n                props.handleClose(true);\n                setCopyStatus(\"\");\n              }}\n            >\n              Close\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport {\n  Box,\n  IconButton,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuItem\n} from \"@chakra-ui/react\";\nimport useAuth from \"../utils/useAuth\";\nimport AddAccount from \"../views/AddAccount\";\nimport Generate from \"../views/Generate\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { FcLock } from \"react-icons/fc\";\nimport { FiPlus } from \"react-icons/fi\";\nimport { MdAutorenew } from \"react-icons/md\";\n\nimport useStore from \"../utils/store\";\n\nexport default function HeaderBar({ update }) {\n  const [error, setError] = useState(\"\");\n  const [openAcct, setOpenAcct] = useState(false);\n  const [openGenerate, setOpenGenerate] = useState(false);\n\n  const history = useHistory();\n  const { logOut } = useAuth();\n  const currentUser = useStore(state => state.currentUser);\n\n  async function handleLogOut() {\n    setError(\"\");\n    try {\n      await logOut(currentUser.id);\n      history.push(\"/login\");\n    } catch {\n      setError(\"Failed to Logout\");\n    }\n  }\n\n  return (\n    <>\n      <Box pt={5} pb={0} bg=\"gray.800\">\n        <ul style={{ display: \"flex\", listStyleType: \"none\" }}>\n          <IconButton\n            as={Link}\n            variant=\"link\"\n            size=\"lg\"\n            to=\"/home\"\n            icon={<FcLock />}\n          />\n          <div style={{ marginLeft: \"auto\", marginRight: \".5em\" }}>\n            <IconButton\n              aria-label=\"Add Account\"\n              onClick={() => setOpenAcct(true)}\n              variant=\"ghost\"\n              isRound={true}\n              color=\"whitesmoke\"\n              _hover={{ backgroundColor: \"gray.700\" }}\n              icon={<FiPlus />}\n            />\n            <IconButton\n              aria-label=\"Generate\"\n              onClick={() => setOpenGenerate(true)}\n              mr=\".7em\"\n              variant=\"ghost\"\n              isRound={true}\n              color=\"whitesmoke\"\n              _hover={{ backgroundColor: \"gray.700\" }}\n              icon={<MdAutorenew />}\n            />\n            <Menu style={{ float: \"right\" }}>\n              <MenuButton\n                style={{ color: \"whitesmoke\", padding: \".6em\" }}\n                _hover={{ backgroundColor: \"gray.700\" }}\n              >\n                Welcome, {currentUser?.first_name}\n              </MenuButton>\n              <MenuList>\n                {/*  <MenuItem>Profile</MenuItem> */}\n                <MenuItem onClick={handleLogOut}>Log Out</MenuItem>\n              </MenuList>\n            </Menu>\n          </div>\n        </ul>\n        <Box mt={2} w=\"100%\" h=\"6px\" bg=\"yellow.400\"></Box>\n      </Box>\n      <AddAccount\n        open={openAcct}\n        onClose={() => setOpenAcct(false)}\n        updateData={update}\n      />\n      <Generate open={openGenerate} onClose={() => setOpenGenerate(false)} />\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalCloseButton,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Button,\n  Alert,\n  AlertIcon,\n  Text,\n  Center\n} from \"@chakra-ui/react\";\nimport API from \"../utils/API\";\n\nexport default function DeleteAcct(props) {\n  const [message, setMessage] = useState(\"\");\n  const [close, setClosing] = useState(false);\n\n  async function handleSubmit() {\n    let result = await API.removeAcct(props.data.id);\n    setMessage(result.data.message);\n    if (result.data.success) {\n      props.update();\n      setClosing(!close);\n      setTimeout(() => {\n        handleClose();\n      }, 50000);\n    }\n  }\n\n  function handleClose() {\n    props.handleClose();\n    setMessage(\"\");\n    setClosing(false);\n  }\n\n  return (\n    <Modal isOpen={props.open} onClose={handleClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          Remove <i>{props.data.url}</i>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text>Are you sure you want to delete this account?</Text>\n          {message && (\n            <Center>\n              <Alert\n                mt=\".5em\"\n                w=\"90%\"\n                status={\n                  message === \"Successfully Removed Account.\"\n                    ? \"success\"\n                    : \"error\"\n                }\n              >\n                <AlertIcon />\n                {message}\n              </Alert>\n            </Center>\n          )}\n        </ModalBody>\n\n        <ModalFooter>\n          <div style={{ marginLeft: \"auto\" }}>\n            <Button\n              disabled={close}\n              onClick={handleClose}\n              variant=\"ghost\"\n              className=\"mr-1\"\n            >\n              Cancel\n            </Button>\n            <Button disabled={close} onClick={handleSubmit} colorScheme=\"red\">\n              Delete\n            </Button>\n          </div>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { useState, useRef } from \"react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  ModalBody,\n  ModalHeader,\n  ModalFooter,\n  Text,\n  Input,\n  InputGroup,\n  InputRightElement,\n  IconButton,\n  Button,\n  Alert,\n  AlertIcon,\n  Center\n} from \"@chakra-ui/react\";\nimport API from \"../utils/API\";\nimport { MdModeEdit } from \"react-icons/md\";\nimport { encrypt } from \"../utils/crypto\";\nimport { ConfirmModal } from \"./AccountCard\";\n\nexport default function ModifyAcct(props) {\n  const [show, setShow] = useState(false);\n  const [open, setOpen] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [close, setClosing] = useState(false);\n  const [value, setValue] = useState(\"password\"); //initial value set so bullets are shown -_-\n\n  const websiteRef = useRef();\n  const usernameRef = useRef();\n\n  async function handleFormSubmit(event) {\n    event.preventDefault();\n\n    let hashedPass;\n\n    if (value !== \"password\" && value !== \"\") hashedPass = await encrypt(value);\n\n    const newData = {\n      url: websiteRef.current.value,\n      email: usernameRef.current.value,\n      password: hashedPass ? hashedPass : null\n    };\n\n    let result = await API.editAcct(props.data.id, newData);\n    setMessage(result.data.message);\n    if (result.data.success) {\n      props.update();\n      setClosing(!close);\n      setTimeout(handleClose, 1500);\n    }\n  }\n\n  function handleClose() {\n    props.handleClose();\n    setShow(false);\n    setMessage(\"\");\n    setValue(\"password\");\n    setClosing(false);\n  }\n\n  return (\n    <>\n      <ConfirmModal\n        open={open}\n        handleClose={() => setOpen(!open)}\n        allow={() => {\n          setShow(!show);\n          setValue(\"\");\n        }}\n      />\n\n      <Modal isOpen={props.open} onClose={handleClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalCloseButton />\n\n          <ModalHeader>\n            Modify <i>{props.data.url}</i>\n          </ModalHeader>\n          <ModalBody style={{ padding: \"5%\" }}>\n            <Text>Website: </Text>\n            <Input my=\".5em\" defaultValue={props.data.url} ref={websiteRef} />\n\n            <Text>Username/Email: </Text>\n            <Input\n              my=\".5em\"\n              defaultValue={props.data.username}\n              ref={usernameRef}\n            />\n\n            <Text>Password: </Text>\n            <InputGroup>\n              <Input\n                type={!show ? \"password\" : \"text\"}\n                value={value}\n                readOnly={!show}\n                onChange={e => setValue(e.target.value)}\n              />\n              <InputRightElement>\n                <IconButton\n                  onClick={() => (!show ? setOpen(!open) : setShow(!show))}\n                  variant=\"outline\"\n                  disabled={show}\n                  icon={<MdModeEdit />}\n                />\n              </InputRightElement>\n            </InputGroup>\n\n            {message && (\n              <Center>\n                <Alert\n                  mt=\".5em\"\n                  status={\n                    message === \"Successfully Updated Account.\"\n                      ? \"success\"\n                      : \"error\"\n                  }\n                  w=\"90%\"\n                >\n                  <AlertIcon />\n                  {message}\n                </Alert>\n              </Center>\n            )}\n          </ModalBody>\n\n          <ModalFooter>\n            <div style={{ float: \"right\" }}>\n              <Button\n                disabled={close}\n                onClick={handleClose}\n                variant=\"ghost\"\n                className=\"mr-1\"\n              >\n                Cancel\n              </Button>\n\n              <Button\n                disabled={close}\n                onClick={handleFormSubmit}\n                bg=\"yellow.400\"\n                color=\"white\"\n                _hover={{ bg: \"yellow.500\" }}\n              >\n                Save\n              </Button>\n            </div>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport { IconButton, Menu, MenuItem } from \"@material-ui/core\";\nimport { BsThreeDotsVertical } from \"react-icons/bs\";\nimport styled from \"styled-components\";\nimport DeleteAcct from \"./DeleteAcct\";\nimport ModifyAcct from \"./ModifyAcct\";\n\nconst OptionBar = styled.div`\n  position: absolute;\n  top: 5%;\n  right: 1.5%;\n`;\n\nexport default function UpdateAccount(props) {\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [openEdit, setOpenEdit] = useState(false);\n  const [openDelete, setOpenDelete] = useState(false);\n\n  const handleClick = event => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <OptionBar>\n        <IconButton children={<BsThreeDotsVertical />} onClick={handleClick} />\n      </OptionBar>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <MenuItem\n          onClick={() => {\n            handleClose();\n            setOpenEdit(!openEdit);\n          }}\n        >\n          Edit\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            handleClose();\n            setOpenDelete(!openDelete);\n          }}\n        >\n          Remove\n        </MenuItem>\n      </Menu>\n\n      <ModifyAcct\n        data={props.data}\n        open={openEdit}\n        handleClose={() => setOpenEdit(!openEdit)}\n        update={props.update}\n      />\n      <DeleteAcct\n        data={props.data}\n        open={openDelete}\n        handleClose={() => setOpenDelete(!openDelete)}\n        update={props.update}\n      />\n    </>\n  );\n}\n","import { useState, useRef } from \"react\";\nimport { Button as IconButton, InputGroup, FormControl } from \"react-bootstrap\";\nimport {\n  Alert,\n  AlertIcon,\n  Text,\n  Input,\n  Button,\n  Modal,\n  ModalOverlay,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  ModalContent,\n  ModalCloseButton\n} from \"@chakra-ui/react\";\nimport { CloseButton } from \"@chakra-ui/react\";\nimport { BsEyeSlashFill, BsEyeFill } from \"react-icons/bs\";\nimport { FaClipboard } from \"react-icons/fa\";\nimport { decrypt } from \"../utils/crypto\";\nimport useAuth from \"../utils/useAuth\";\nimport UpdateAccount from \"./UpdateAccount\";\nimport useStore from \"../utils/store\";\n\nexport default function AccountCard(props) {\n  const [show, setShow] = useState(false);\n  const [copyStatus, setCopyStatus] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const [alert, setAlert] = useState(false);\n\n  const websiteRef = useRef();\n  const usernameRef = useRef();\n  const passwordRef = useRef();\n\n  function copyToClipboard(ref) {\n    try {\n      ref.current.select();\n      document.execCommand(\"copy\");\n      //event.target.focus();\n      setCopyStatus(\"Copied!\");\n      setAlert(!alert);\n    } catch (err) {\n      setCopyStatus(\"Something went wrong\");\n    }\n  }\n\n  function handleClose() {\n    setOpen(!open);\n  }\n\n  return (\n    <>\n      <ConfirmModal\n        open={open}\n        handleClose={handleClose}\n        allow={() => setShow(!show)}\n      />\n      <div className=\"card mt-4 mb-3\" style={{ minWidth: \"30vw\" }}>\n        <div className=\"row g-0\">\n          <div className=\"col-md-4\">\n            <img\n              src={props.data.image || \"https://via.placeholder.com/200\"}\n              alt=\"account\"\n              width=\"200\"\n              height=\"200\"\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <div className=\"card-body\">\n              <h5 className=\"card-title\">Account Name</h5>\n              <p className=\"card-text\">\n                <strong>Website: </strong>\n                <InputGroup>\n                  <FormControl\n                    value={props.data.url}\n                    ref={websiteRef}\n                    readOnly\n                  />\n                  <InputGroup.Append>\n                    <IconButton\n                      variant=\"outline-secondary\"\n                      onClick={() => copyToClipboard(websiteRef)}\n                    >\n                      <FaClipboard />\n                    </IconButton>\n                  </InputGroup.Append>\n                </InputGroup>\n              </p>\n            </div>\n          </div>\n          <div className=\"col-md-3\">\n            <div className=\"card-body align-items-center\">\n              <p className=\"card-text\">\n                <strong>Username: </strong>\n                <InputGroup>\n                  <FormControl\n                    value={props.data.username}\n                    ref={usernameRef}\n                    readOnly\n                  />\n                  <InputGroup.Append>\n                    <IconButton\n                      variant=\"outline-secondary\"\n                      onClick={() => copyToClipboard(usernameRef)}\n                    >\n                      <FaClipboard />\n                    </IconButton>\n                  </InputGroup.Append>\n                </InputGroup>\n              </p>\n              <p className=\"card-text\">\n                <strong>Password: </strong>\n                <InputGroup>\n                  <FormControl\n                    type={!show ? \"password\" : \"text\"}\n                    ref={passwordRef}\n                    value={decrypt(props.data.password)}\n                    readOnly\n                  />\n                  <InputGroup.Append>\n                    <IconButton\n                      variant=\"outline-secondary\"\n                      onClick={() => (!show ? setOpen(!open) : setShow(!show))}\n                    >\n                      {!show ? <BsEyeFill /> : <BsEyeSlashFill />}{\" \"}\n                    </IconButton>\n                    <IconButton\n                      variant=\"outline-secondary\"\n                      onClick={() => copyToClipboard(passwordRef)}\n                    >\n                      <FaClipboard />\n                    </IconButton>\n                  </InputGroup.Append>\n                </InputGroup>\n              </p>\n            </div>\n          </div>\n          <UpdateAccount data={props.data} update={props.update} />\n        </div>\n\n        {alert && (\n          <Alert\n            className=\"text-center\"\n            status={copyStatus === \"Copied!\" ? \"success\" : \"error\"}\n            w=\"94%\"\n            style={{ margin: \"1.5% 3%\" }}\n            transition\n            dismissible\n          >\n            <AlertIcon />\n            {copyStatus}\n            <CloseButton\n              position=\"absolute\"\n              right=\"8px\"\n              top=\"8px\"\n              onClick={() => setAlert(false)}\n            />\n          </Alert>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport function ConfirmModal(props) {\n  const [message, setMessage] = useState(\"\");\n  const [close, setClosing] = useState(false);\n\n  const confirmPasswordRef = useRef();\n  const { confirmPassword } = useAuth();\n  const currentUser = useStore(state => state.currentUser);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    let result = await confirmPassword(\n      currentUser.email,\n      confirmPasswordRef.current.value\n    );\n    if (result.data.success) {\n      setMessage(\"Confirmed!\");\n      setClosing(!close);\n      setTimeout(() => {\n        props.handleClose();\n        setMessage(\"\");\n        setClosing(false);\n        props.allow();\n      }, 1500);\n    } else setMessage(result.data.message);\n  };\n\n  return (\n    <Modal\n      isOpen={props.open}\n      onClose={() => {\n        props.handleClose();\n        setMessage(\"\");\n      }}\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Confirm Identity</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Text>Please confirm your password: </Text>\n          <Input my={4} type=\"password\" ref={confirmPasswordRef} isRequired />\n\n          {message && (\n            <Alert\n              className=\"text-center\"\n              status={message === \"Confirmed!\" ? \"success\" : \"error\"}\n            >\n              <AlertIcon />\n              {message}\n            </Alert>\n          )}\n        </ModalBody>\n\n        <ModalFooter>\n          <Button\n            onClick={handleFormSubmit}\n            isDisabled={close}\n            className=\"float-right\"\n          >\n            Submit\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { Heading, Center } from \"@chakra-ui/react\";\nimport HeaderBar from \"../components/HeaderBar\";\nimport AccountCard from \"../components/AccountCard\";\nimport API from \"../utils/API\";\nimport useStore from \"../utils/store\";\n\nexport default function Dashboard() {\n  const [accounts, setAccounts] = useState([]);\n  const [updateData, setUpdateData] = useState(false);\n  const { currentUser } = useStore();\n\n  useEffect(() => {\n    getAccounts();\n  }, [updateData]);\n\n  async function getAccounts() {\n    let result = await API.getAccts(currentUser.id);\n    setAccounts(result.data.response);\n  }\n\n  // TODO: when they are no accounts, add a \"click here to get started\" button\n\n  return (\n    <>\n      <HeaderBar update={() => setUpdateData(!updateData)} />\n      <Container>\n        <Center>\n          <Heading mt=\"1em\">Dashboard</Heading>\n        </Center>\n        {accounts.map(item => {\n          return (\n            <AccountCard\n              data={item}\n              update={() => setUpdateData(!updateData)}\n            />\n          );\n        })}\n      </Container>\n    </>\n  );\n}\n","import { useState } from \"react\";\nimport useAuth from \"../utils/useAuth\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  Box,\n  Input,\n  Heading,\n  Center,\n  Stack,\n  Text,\n  InputGroup,\n  InputRightElement,\n  IconButton,\n  Alert,\n  AlertIcon,\n  Link as ReachLink,\n  Button\n} from \"@chakra-ui/react\";\nimport { AiFillEyeInvisible, AiFillEye } from \"react-icons/ai\";\nimport ErrorMessage from \"../components/ErrorMessage\";\n\nexport default function Login() {\n  const initialValues = {\n    email: \"\",\n    password: \"\"\n  };\n\n  const [formValues, setFormValues] = useState(initialValues);\n  const [formErrors, setFormErrors] = useState({});\n  const [show, setShow] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const history = useHistory();\n\n  const { login } = useAuth();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    setFormValues({\n      ...formValues,\n      [name]: value\n    });\n  };\n\n  const validateFields = values => {\n    let errors = {};\n\n    if (!values.email) errors.email = \"Must enter an email\";\n    if (!values.password) errors.password = \"Must enter a password\";\n\n    return errors;\n  };\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n\n    setFormErrors(validateFields(formValues));\n\n    if (!Object.keys(formErrors).length) {\n      let result = await login(formValues);\n\n      if (result.data.success) {\n        history.push(\"/home\");\n      } else setError(result.data.message);\n    } else setError(\"Failed to log in\");\n  };\n\n  return (\n    <div\n      className=\"d-flex align-items-center justify-content-center css-selector\"\n      style={{ minHeight: \"100vh\" }}\n    >\n      <Center>\n        <Stack>\n          <Box\n            borderWidth=\"2px\"\n            borderColor=\"gray.500\"\n            bg=\"white\"\n            borderRadius=\"7px\"\n            w=\"500px\"\n            minheight=\"360px\"\n            mt=\"3em\"\n            mb=\".5em\"\n            p=\"1.5em\"\n          >\n            <Center>\n              <Heading>Log In</Heading>\n            </Center>\n\n            <Stack spacing={3} mt=\"1em\">\n              <InputGroup>\n                <Text htmlFor=\"email\" mr=\"3em\">\n                  Email\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formValues.email}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.email}\n                />\n              </InputGroup>\n\n              {formErrors.email ? (\n                <ErrorMessage children={formErrors.email} />\n              ) : null}\n\n              <InputGroup>\n                <Text htmlFor=\"password\" mr=\"1em\">\n                  Password\n                </Text>\n                <Input\n                  placeholder=\"Enter Here\"\n                  type={show ? \"text\" : \"password\"}\n                  id=\"password\"\n                  name=\"password\"\n                  value={formValues.password}\n                  onChange={handleChange}\n                  errorBorderColor=\"crimson\"\n                  isInvalid={formErrors.password}\n                />\n                <InputRightElement\n                  children={\n                    <IconButton\n                      icon={show ? <AiFillEyeInvisible /> : <AiFillEye />}\n                      onClick={() => setShow(!show)}\n                      variant=\"ghost\"\n                    />\n                  }\n                />\n              </InputGroup>\n\n              {formErrors.password ? (\n                <ErrorMessage children={formErrors.password} />\n              ) : null}\n\n              {error && (\n                <Alert status=\"error\">\n                  <AlertIcon />\n                  {error}\n                </Alert>\n              )}\n            </Stack>\n\n            <Button\n              onClick={handleFormSubmit}\n              mt=\"1em\"\n              bg=\"yellow.400\"\n              color=\"white\"\n              _hover={{ bg: \"yellow.500\" }}\n              style={{ float: \"right\" }}\n            >\n              Submit\n            </Button>\n          </Box>\n          {/*<Center>\n            <ReachLink as={Link} to=\"/forgotpassword\" color=\"yellow.400\">\n              Forget Password?\n            </ReachLink>\n          </Center>*/}\n\n          <Center>\n            <Text color=\"gray.600\">\n              Don't have an account?{\" \"}\n              <ReachLink as={Link} to=\"/signup\" color=\"yellow.400\">\n                Sign Up\n              </ReachLink>\n            </Text>\n          </Center>\n        </Stack>\n      </Center>\n    </div>\n  );\n}\n","import React, { useRef, useState } from 'react'\nimport { Card, Form, Button, Alert } from 'react-bootstrap'\nimport useAuth  from \"../utils/useAuth\"\nimport { Link } from 'react-router-dom'\n\nexport default function ForgotPassword(props) {\n    \n    const emailRef = useRef()\n\n    const [error, setError] = useState('')\n    const [loading, setLoading] = useState(false)\n    const [message, setMessage] = useState(\"\")\n\n    const { resetPassword } = useAuth()\n\n    async function handleFormSubmit(event){\n        event.preventDefault()\n\n        \n\n        try{\n            setError('')\n            setLoading(true)\n            await resetPassword(emailRef.current.value)\n            setMessage('Success! Check your email for further instructions')\n        } catch{\n            setError('Failed to reset password')\n        }\n\n        setLoading(false)\n        \n    }\n\n    return (\n        <>\n           <Card bg=\"light\">\n                <Card.Body>\n                    <h2 className=\"text-center mb-4\" >Password Reset</h2>\n                    {error && <Alert variant=\"danger\">{error}</Alert>}\n                    {message && <Alert variant=\"success\">{message}</Alert>}\n                    <Form onSubmit={handleFormSubmit}>\n                        <Form.Group id='email'>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control type=\"email\" ref={emailRef} required/>\n                        </Form.Group>\n                        <Button disabled={loading} className=\"w-100\" type=\"submit\" variant=\"primary\">Reset Password</Button>\n                    </Form>\n                    <div className=\"w-100 text-center mt-3\">\n                        <Link to=\"/login\">Log In</Link>\n                    </div>\n                </Card.Body>\n            </Card> \n            <div className=\"w-100 text-center mt-2\">\n                Don't have an account? <Link to=\"/signup\">Sign up</Link>\n            </div>\n        </>\n    )\n}\n","import {\n  Box,\n  Heading,\n  HStack,\n  Link,\n  Stack,\n  Center,\n  Image,\n  Button\n} from \"@chakra-ui/react\";\nimport { Link as ReachLink } from \"react-router-dom\";\n\nexport default function Landing() {\n  return (\n    <>\n      <Box bg=\"gray.700\" w=\"100vw\" h=\"90vh\">\n        <Box>\n          <HStack\n            float=\"right\"\n            mr=\"1em\"\n            mt=\".5em\"\n            spacing={10}\n            color=\"gray.300\"\n          >\n            <Link _hover={{ color: \"#fca223\" }} as={ReachLink} to=\"/signup\">\n              Sign Up\n            </Link>\n            <Link _hover={{ color: \"#fca223\" }} as={ReachLink} to=\"/login\">\n              Log In\n            </Link>\n          </HStack>\n          <div\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              paddingTop: \"30vh\"\n            }}\n          >\n            <Image\n              objectFit=\"cover\"\n              src=\"./android-chrome-192x192.png\"\n              boxSize=\"192px\"\n              alt=\"icon\"\n            />\n            <Stack spacing={0} pl=\"2em\">\n              <Heading style={{ fontSize: \"62pt\" }} color=\"#fca223\">\n                Pass\n              </Heading>\n              <Heading style={{ fontSize: \"62pt\" }}>Lock</Heading>\n              <Button\n                mt=\"3em\"\n                bg=\"gray.300\"\n                _hover={{ bg: \"#fca223\", color: \"white\" }}\n              >\n                Try Now\n              </Button>\n            </Stack>\n          </div>\n        </Box>\n      </Box>\n      <Box bg=\"gray.300\" w=\"100vw\" h=\"90vh\">\n        <Center>\n          <Heading color=\"gray.700\" pt=\"1em\" size=\"2xl\">\n            All your Accounts in One Place\n          </Heading>\n        </Center>\n        <p>show little boxes of website previews</p>\n        <p>and maybe a few testimonials</p>\n      </Box>\n    </>\n  );\n}\n","import { useState, useLayoutEffect } from \"react\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport Signup from \"./views/Signup\";\nimport { Container } from \"react-bootstrap\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\nimport PrivateRoute from \"./utils/PrivateRoute\";\nimport useStore from \"./utils/store\";\nimport API from \"./utils/API\";\n\nimport Dashboard from \"./views/Dashboard\";\nimport Login from \"./views/Login\";\nimport ForgotPassword from \"./views/ForgotPassword\";\nimport Landing from \"./views/Landing\";\n\nfunction App() {\n  const currentUser = useStore(state => state.currentUser);\n  const { setCurrentUser } = useStore();\n\n  useLayoutEffect(() => {\n    if (!currentUser) checkSession();\n  }, []);\n\n  const checkSession = async () => {\n    let result = await API.getCurrentSession();\n    if (result.data.success) {\n      setCurrentUser(result.data.response);\n    }\n  };\n\n  return (\n    <ChakraProvider>\n      <Switch>\n        <PrivateRoute path=\"/home\" component={Dashboard} />\n\n        <Route exact path=\"/\" component={Landing} />\n        <Route path=\"/signup\" component={Signup} />\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/forgotpassword\" component={ForgotPassword} />\n\n        <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\n      </Switch>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from \"./App\";\nimport \"./style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}